{"version":3,"file":"migrator.js","mappings":";;;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB;AACA,aAAa,UAAU;AACvB,aAAa,qDAAqD,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gFAAgF,SAAS;AACrG;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,WAAW,mFAAmF,SAAS;AACvG,IAAI;AACJ;AACA,8BAA8B;AAC9B,6BAA6B;AAC7B;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,qDAAqD,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA,C","sources":["webpack://Migrator/webpack/bootstrap","webpack://Migrator/webpack/runtime/define property getters","webpack://Migrator/webpack/runtime/hasOwnProperty shorthand","webpack://Migrator/webpack/runtime/make namespace object","webpack://Migrator/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Selectors used by this script\r\nlet typeSelector = 'data-type';\r\nlet formIdTmpl   = 'migrationForm';\r\n\r\n/**\r\n * Storage for migrateables\r\n * @var {Object}  migrateablesList\r\n */\r\nlet migrateablesList = {};\r\n\r\n/**\r\n * Submit a migration task\r\n * \r\n * @param {Object}  event     Event object\r\n * @param {Object}  element   DOM element object\r\n */\r\nexport let submitTask = function(event, element) {\r\n  event.preventDefault();\r\n\r\n  let type   = element.getAttribute(typeSelector);\r\n  let formId = formIdTmpl + '-' + type;\r\n  let task   = element.parentNode.querySelector('[name=\"task\"]').value;\r\n\r\n  ajax(formId, task)\r\n    .then(res => {\r\n      // Handle the successful result here\r\n      responseHandler(res);\r\n    })\r\n    .catch(error => {\r\n      // Handle any errors here\r\n      console.error(error);\r\n    });\r\n};\r\n\r\n/**\r\n * Perform an ajax request in json format\r\n * \r\n * @param   {String}   formId   Id of the form element\r\n * @param   {String}   task     Name of the task\r\n * \r\n * @returns {Object}   Result object\r\n *          {success: true, status: 200, message: '', messages: {}, data: { {success: bool, message: string, data: mixed} }}\r\n */\r\nlet ajax = async function(formId, task) {\r\n\r\n  // Catch form and data\r\n  let formData = new FormData(document.getElementById(formId));\r\n  formData.append('format', 'json');\r\n\r\n  if(task == 'migration.start') {\r\n    formData.append('id', getNextMigrationID(formId));\r\n  }\r\n\r\n  // Set request parameters\r\n  let parameters = {\r\n    method: 'POST',\r\n    mode: 'same-origin',\r\n    cache: 'default',\r\n    redirect: 'follow',\r\n    referrerPolicy: 'no-referrer-when-downgrade',\r\n    body: formData,\r\n  };\r\n\r\n  // Set the url\r\n  let url = document.getElementById(formId).getAttribute('action');\r\n\r\n  // Perform the fetch request\r\n  let response = await fetch(url, parameters);\r\n\r\n  // Resolve promise as text string\r\n  let txt = await response.text();\r\n  let res = null;\r\n\r\n  if (!response.ok) {\r\n    // Catch network error\r\n    console.log(txt);\r\n    return {success: false, status: response.status, message: response.message, messages: {}, data: {message: txt}};\r\n  }\r\n\r\n  if(txt.startsWith('{\"success\"')) {\r\n    // Response is of type json --> everything fine\r\n    res = JSON.parse(txt);\r\n    res.status = response.status;\r\n    res.data   = JSON.parse(res.data);\r\n  } else if (txt.includes('Fatal error')) {\r\n    // PHP fatal error occurred\r\n    res = {success: false, status: response.status, message: response.statusText, messages: {}, data: {message: txt}};\r\n  } else {\r\n    // Response is not of type json --> probably some php warnings/notices\r\n    let split = txt.split('\\n{\"');\r\n    let temp  = JSON.parse('{\"'+split[1]);\r\n    let data  = JSON.parse(temp.data);\r\n    res = {success: true, status: response.status, message: split[0], messages: temp.messages, data: data};\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n/**\r\n * Perform a migration task\r\n * @param   {String}   formId   Id of the form element\r\n * \r\n * @returns {String}   Id of the database record to be migrated\r\n */\r\nlet getNextMigrationID = function(formId) {\r\n  let type  = formId.replace(formIdTmpl + '-', '');\r\n  let form  = document.getElementById(formId);\r\n\r\n  let migrateable = atob(form.querySelector('[name=\"migrateable\"]').value);\r\n  migrateable = JSON.parse(migrateable);\r\n\r\n  // Overwrite migrateable in list\r\n  migrateablesList[type] = migrateable;\r\n\r\n  // Loop through queue\r\n  for (let id of migrateable.queue) {\r\n    if (!(id in migrateable.successful) && !(id in migrateable.failed)) {\r\n      migrateablesList[type]['currentID'] = id;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return migrateablesList[type]['currentID'];\r\n}\r\n\r\n/**\r\n * Handle migration response\r\n * \r\n * @param   {Object}   response   The response object in the form of\r\n *          {success: true, status: 200, message: '', messages: {}, data: { {success: bool, message: string, data: mixed} }}\r\n * \r\n * @returns void\r\n */\r\nlet responseHandler = function(response) {\r\n  console.log(response);\r\n}"],"names":[],"sourceRoot":""}